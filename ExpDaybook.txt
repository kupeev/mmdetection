Apr13.2022,

    train_step() base.py
        losses = self(**data)
            forward() base.py:177:
                return self.forward_train(img, img_metas, **kwargs)
                =forward_train() kd_one_stage.py:67
                    x = self.extract_feat(img)
                    extract_feat, single_stage.py:43
                    eto FCOS feature pyramide  for student(?)

                    teacher_x = self.teacher_model.extract_feat(img)
                        eto feature pyramide  of FCOS

                    out_teacher = self.teacher_model.bbox_head(teacher_x)
                        out_teacher = {tuple: 2}
                         0 = {list: 5}
                          0 = {Tensor: (1, 80, 100, 100)}
                          1 = {Tensor: (1, 80, 50, 50)}
                          2 = {Tensor: (1, 80, 25, 25)}
                          3 = {Tensor: (1, 80, 13, 13)}
                          4 = {Tensor: (1, 80, 7, 7)}
                         1 = {list: 5}
                          0 = {Tensor: (1, 68, 100, 100)}
                          1 = {Tensor: (1, 68, 50, 50)}
                          2 = {Tensor: (1, 68, 25, 25)}
                          3 = {Tensor: (1, 68, 13, 13)}
                          4 = {Tensor: (1, 68, 7, 7)}
                    We: classes and bb distrib-s

                    losses = self.bbox_head.forward_train
                    (x, out_teacher, img_metas,gt_bboxes,
                    gt_labels,gt_bboxes_ignore)

                    =forward_train, ld_head.py:171

                        outs = self(x) //x - feat, self: class of LDHead, see obtaining out_teacher above
                        soft_target = out_teacher[1]

                        loss_inputs = outs + (gt_bboxes, gt_labels,soft_target, img_metas)

                        losses = self.loss(*loss_inputs,gt_bboxes_ignore=gt_bboxes_ignore)
                        =loss() in ld_head.py

                            cls_reg_targets = self.get_targets(
                            =get_targets() in gfl.head

                           (anchor_list, labels_list,label_weights_list,bbox_targets_list,
                           bbox_weights_list, num_total_pos,num_total_neg) = cls_reg_targets

                           losses_cls, losses_bbox, losses_dfl, losses_ld, \
                           avg_factor = multi_apply(self.loss_single,anchor_list,cls_scores,
                               bbox_preds,labels_list,label_weights_list,
                               bbox_targets_list,self.prior_generator.strides,
                               soft_target,num_total_samples=...)

                           return dict(
                                loss_cls=losses_cls,
                                loss_bbox=losses_bbox,
                                loss_dfl=losses_dfl,
                                loss_ld=losses_ld)

---------------


train_step, base.py
    losses = self(**data)
        losses.keys()
        Out[3]: dict_keys(['loss_cls', 'loss_bbox', 'loss_dfl', 'loss_ld'])


        WHERE IS LOSS_KD?!!


-------------------




x = self.backbone(img) in /home/konstak/projects2/mmdetection/mmdet/models/detectors/single_stage.py


    self.backbone(img)[0].shape
        Out[6]: torch.Size([1, 256, 200, 200])
        self.backbone(img)[1].shape
        Out[7]: torch.Size([1, 512, 100, 100])
        self.backbone(img)[2].shape
        Out[8]: torch.Size([1, 1024, 50, 50])
        self.backbone(img)[3].shape
        Out[9]: torch.Size([1, 2048, 25, 25])


        x - urovni backbone


after self.neck
        


   x[0].shape
    Out[11]: torch.Size([1, 256, 100, 100])
    x[1].shape
    Out[12]: torch.Size([1, 256, 50, 50])
    x[2].shape
    Out[13]: torch.Size([1, 256, 25, 25])
    x[3].shape
    Out[14]: torch.Size([1, 256, 13, 13])
    x[4].shape
    Out[15]: torch.Size([1, 256, 7, 7])


eto feature pyramide  of FCOS
